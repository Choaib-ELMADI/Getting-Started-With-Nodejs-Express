1. What is Node.js?
                =
                =
====================================================================
=                                                                  =
=                                                                  = 
Front-end(Browser)                                                 Back-end(Server)
JavaScript is normally confined to run                             Node allows us to run JavaScript on the server side
in a browser in the past on the frontend                           as well or even directly on computers.
(add interactivity to a web page).

We can't directly run JavaScript on a computer, but it can run inside a browser, So how does that work?
Running inside browsers is an engine called V8 engine (C++ by Google) and it compiles JavaScript into
machine code at runtime.

Node.js is a program also written in C++ and that wraps the V8 engine.
Node is more than V8 (adds more feature to JavaScript):
    *) Read & Write files on a computer
    *) Conect to a database
    *) Act as a server for content

2. Node basics:
2. A. global object: 
    It's like the window object in the browser

2. B. import:
    To import something, we use require('./relative__path')
    When we require a file, we run it
    We dont have access to what we require, until we export it
    To export something, we use module.exports = { ... }

2. C. file system:
    *) readFile:
        - is an async fct
        - it takes the relative file path and a callback fct that returns a buffer

    *) writeFile:
        - is an async fct
        - it takes the relative file path, data to write and a callback fct

    *) unlink: (Delete file)
        - is an async fct
        - it takes the relative file path and a callback fct

    *) mkdir / rmdir:
        - is an async fct
        - it takes the relative folder path and a callback fct

2. D. streams and buffers:
    If the data is very very huge, we dont use the regular fcts, it's better to use streams
    With streams, we can use data before it's fully loaded

    1) create a reading stream: fs.createReadStream('source_of_data_relative_path', { options })
        create a writing stream: fs.createWriteStream('source_of_data_relative_path')
    2) add event listener to the reading stream
    3) fire a callback fct when there is a new chunk of data

    piping:
        from readSream directly to writeStream

2. E. clients and servers:
    */ The server is always listening for request.
    */ When we type a website, the browser sends a request to the server. The server then decides what
        to send back as a response.

    IP addresses and domains: for each domain name we associate its own ip address

    GET Request ==>  send request to the server

2. F. create a server:
    localhost and port numbers:
        - localhost is like a domain name in the web
        - localhost ----> 127.0.0.1 ----> own computer
        (listen to requests coming to our own computer)

        - port numbers are like doors into a computer

2. J. requests and responses:
    To send a response back to the browser:
        1) set the response headers
        2) write the response content
        3) end the response

        if we want to write one after anoter ==> res.write()...
        else we pass the data to res.end(...)

3. Express:
3. A. basics:
    1) create an instance of the express app
    2) make the listening
    3) listen to a request
    4) send a response: express automatically add content-type and status-code

    5) to send a page, we pass its relative path and the root to res.sendFile()

    6) to redirect to the 404 page, we use the use function
        use function fires for every single request
        so, it must be at the bottom always

3. B. view engines:
    Or template engines, they are used to pass dynamic data and logic to the browser.

    => after creating our app, we register the view engine.
        So, express knows what creates the templates.
    => the views (templates) by default are in the views folder.
        If not, we should configure it.
    => With view engines, we dont send files but we render a view.